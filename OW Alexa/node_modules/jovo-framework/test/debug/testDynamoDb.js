'use strict';
let DynamoDB = require('../../lib/integrations/db/dynamoDb').DynamoDb;
let AWS = require('aws-sdk');
let assert = require('chai').assert;


let awsConfig = {
    accessKeyId: 'AKIAJLNSO2FH4M43H2AA',
    secretAccessKey: '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',
    region: 'us-east-1',
};
AWS.config.update(awsConfig);


describe.skip('DynamoDb Class', function() {
    describe('constructor()', function() {
        it.skip('should throw an error if no aws-sdk package has been installed.', function() {
            // how?
        });

        it('should set table name and initiate Dynamo DB Document Client', function() {
           let dynamoDB = new DynamoDB('tableABC');
           assert.ok(dynamoDB.tableName === 'tableABC');
           assert.ok(dynamoDB.docClient instanceof
               dynamoDB.aws.DynamoDB.DocumentClient);
        });

        it('should set the aws config object', function() {
            let dynamoDB = new DynamoDB('tableABC', {
                accessKeyId: 'keyId',
                secretAccessKey: 'accessKey',
                region: 'us-east-1',
            });
            assert.ok(dynamoDB.aws.config.credentials.accessKeyId === 'keyId');
            assert.ok(dynamoDB.aws.config.region === 'us-east-1');
        });
    });

    describe('setMainKey(mainKey)', function() {
        it('should set the mainkey', function() {
            let dynamoDB = new DynamoDB('tableABC');
            dynamoDB.setMainKey('userId');

            assert.ok(dynamoDB.mainKey === 'userId');
        });
    });

    describe('createTable(mainKey, callback', function() {
       it.skip('should create new table', function(done) {
           this.timeout(6000);
           let dynamoDB = new DynamoDB('tableABCCreateTable', awsConfig);
           dynamoDB.load('testKey', function(err, data) {
               assert.ok(err.code === 'ResourceNotFoundException');
               dynamoDB.createTable('tableABCCreateTable', 'userId', function(err, data) {
                  if (!err) {
                          done();
                  }
               });
           });
       });
    });

    describe('load(key, callback)', function() {
        it.skip('should return an AWS error UnrecognizedClientException', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableA');
            dynamoDB.load('testKey', function(err, data) {
                assert.ok(err.code === 'UnrecognizedClientException');
                done();
            });
        });

        it('should return ERR_MAIN_KEY_NOT_FOUND', function(done) {
            this.timeout(20000);
            setTimeout(function() {
                let dynamoDB = new DynamoDB('tableABC', awsConfig);
                dynamoDB.setMainKey('userABCD');
                dynamoDB.load('testKey', function(err, data) {
                    assert(err.code === DynamoDB.ERR_MAIN_KEY_NOT_FOUND);
                    done();
                });
            }, 10000);
        });

        it('should return ERR_DATA_KEY_NOT_FOUND', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userABC');
            dynamoDB.save('test', {foo: 'bar'}, function(err, data) {
                dynamoDB.load('testKey', function(err, data) {
                    assert(err.code === DynamoDB.ERR_DATA_KEY_NOT_FOUND);
                    done();
                });
            });
        });
        it('should return correct value', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userABC');
            dynamoDB.load('test', function(err, data) {
                assert.ok(data.foo === 'bar');

                // delete data
                let docClient = new AWS.DynamoDB.DocumentClient();
                let params = {
                    Key: {
                        userId: 'userABC',
                    },
                    TableName: 'tableABC',
                };
                docClient.delete(params, function(err, data) {
                    if (err) {
                        console.log(err);
                    }
                    done();
                });
            });
        });
    });
    describe('save(key, value, callback)', function() {
        it('should save a value', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userABC');
            dynamoDB.save('var1', {foo: 'bar'}, function(err, data) {
                dynamoDB.load('var1', function(err, data) {
                    assert.ok(data.foo === 'bar');
                    done();
                });
            });
        });

        it('should save another value', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userABC');
            dynamoDB.save('var2', {foofoo: 'barbar'}, function(err, data) {
                dynamoDB.load('var2', function(err, data) {
                    assert.ok(data.foofoo === 'barbar');
                    dynamoDB.load('var1', function(err, data) {
                        assert.ok(data.foo === 'bar');
                        done();
                    });
                });
            });
        });
    });

    describe('deleteUser(callback)', function() {
        it('should create a user', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userXYZ');
            dynamoDB.save('var1', {foo: 'bar'}, function(err, data) {
                // console.log(err);
                done();
            });
        });

        it('should delete a user', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userXYZ');
            dynamoDB.deleteUser(function(err, data) {
               if (!err) {
                   assert.ok(true);
               }
               done();
            });
        });
    });

    describe('deleteData(key, callback)', function() {
        it('should create  data ', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userXYZ1');
            dynamoDB.save('var1', {foo: 'bar'}, function(err, data) {
                done();
            });
        });
        it('should create more data ', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userXYZ1');
            dynamoDB.save('var2', {foo: 'bar', x: 0, y: -1}, function(err, data) {
                // console.log(err);
                done();
            });
        });

        it('should delete data with given key', function(done) {
            this.timeout(8000);
            let dynamoDB = new DynamoDB('tableABC', awsConfig);
            dynamoDB.setMainKey('userXYZ1');
            dynamoDB.deleteData('var1', function(err, data) {
                if (!err) {
                    assert.ok(true);
                }
                done();
            });
        });
    });
});
