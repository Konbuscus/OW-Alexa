'use strict';

const webhook = require('../../index').Webhook;
const _ = require('lodash');

webhook.listen(3000, function() {
    console.log('Example server listening on port 3000!');
});

const app = require('../../index').Jovo;
app.enableRequestLogging();
// app.setRequestLoggingObjects(['request', 'context.AudioPlayer']);
app.enableResponseLogging();

let tracks = [
    {
        token: 'uneasy',
        title: 'Uneasy from Nextlife',
        url: 'https://www.swetlow.de/uneasy.mp3',
    },
    {
        token: 'atlashands',
        title: 'Atlas Hands',
        url: 'https://www.jovo.tech/audio/xsy4yLol-atlas-hands-samuraii-edit-benjamin-francis-leftwich.mp3',
    },
    {
        token: 'heartbeats',
        title: 'Heartbeats',
        url: 'https://www.jovo.tech/audio/CNtxOn3S-jose-gonzales-heartbeats.mp3',
    },
    {
        token: 'stayalive',
        title: 'Stay alive',
        url: 'https://www.jovo.tech/audio/GqpEzC6x-jose-gonzalez-stay-alive.mp3',
    },
];

let audioPlayer;
// listen for post requests
webhook.post('/webhook', function(req, res) {
    app.handleRequest(req, res, handlers2);
    audioPlayer = app.alexaSkill().audioPlayer();
    app.execute();
});

let handlers2 = {
    'LAUNCH': function() {
        app.tell('ok');
        audioPlayer.startOver('https://s3.amazonaws.com/viki-ticker/silence.mp3', tracks[0].token);
    },
    'AMAZON.PauseIntent': function() {
        app
            .alexaSkill()
            .audioPlayer()
            .stop()
            .endSession();
    },

    'AUDIOPLAYER': {
        'AudioPlayer.PlaybackStarted': function() {
            console.log('AudioPlayer.PlaybackStarted');
            // app.response.json({
            //     version: '1.0',
            //     response: {
            //         shouldEndSession: true,
            //     },
            //     sessionAttributes: {},
            // });
            app.response.status(400);
        },
        'AudioPlayer.PlaybackNearlyFinished': function() {
            console.log('AudioPlayer.PlaybackNearlyFinished');
        },
        'AudioPlayer.PlaybackStopped': function() {
            console.log('AudioPlayer.PlaybackStopped');
        },
    },
};


let handlers = {

    'LAUNCH': function() {
        app.toIntent('PlayIntent');
        // app.tell('hi');
    },
    'PlayIntent': function() {
        audioPlayer.setExpectedPreviousToken(null);
        audioPlayer.setOffsetInMilliseconds(0);
        // start over if finished, otherwise continue with last audio
        if (audioPlayer.getPlayerActivity() === 'FINISHED') {
            audioPlayer.setOffsetInMilliseconds(0);
        }

        let track = findTrackByToken(audioPlayer.getToken());
        if (!track) {
            track = tracks[0];
        }
        audioPlayer
            .play(
                track.url,
                track.token)
            .tell('Ich starte');
    },
    'AMAZON.ResumeIntent': function() {
        let track = findTrackByToken(audioPlayer.getToken());
        audioPlayer
            .play(
                track.url,
                audioPlayer.getToken())
            .endSession();
    },
    'AMAZON.NextIntent': function() {
        audioPlayer.setOffsetInMilliseconds(0);
        app.db().load('audio', function(error, data) {
            let track = nextTrack(audioPlayer.getToken(), data.shuffle, data.loop);

            if (data.repeat) {
                track = findTrackByToken(audioPlayer.getToken());
                data.repeat = false;
                app.db().save('audio', data, function(err, data) {
                    // do nothing
                });
            }
            // no next track
            if (!track) {
                // clear queue, stop after track is finished
                audioPlayer.clearQueue('CLEAR_ALL').tell('Kein weiterer Song in der Playlist.');
            } else {
                console.log('Next song: ' + track.title);
                audioPlayer
                    .play(
                        track.url,
                        track.token,
                        'REPLACE_ALL')
                    .endSession();
            }
        });
    },
    'AMAZON.PreviousIntent': function() {
        let track = previousTrack(audioPlayer.getToken());
        // doesn't handle shuffle mode
        if (track) {
            audioPlayer.setOffsetInMilliseconds(0);
            audioPlayer
                .play(
                    track.url,
                    track.token)
                .endSession();
        } else {
            app
                .tell('Es ist schon das erste Lied in der Playlist');
        }
    },
    'AMAZON.PauseIntent': function() {
        app
            .alexaSkill()
            .audioPlayer()
            .stop()
            .endSession();
    },
    'AMAZON.ShuffleOnIntent': function() {
        app.db().load('audio', function(error, data) {
           data.shuffle = true;
           app.db().save('audio', data, function(err) {
              app.tell('Shuffle aktiviert.');
           });
        });
    },
    'AMAZON.ShuffleOffIntent': function() {
        app.db().load('audio', function(error, data) {
            data.shuffle = false;
            app.db().save('audio', data, function(err) {
                app.tell('Shuffle deaktiviert.');
            });
        });
    },
    'AMAZON.LoopOnIntent': function() {
        app.db().load('audio', function(error, data) {
            data.loop = true;
            app.db().save('audio', data, function(err) {
                app.tell('Loop aktiviert.');
            });
        });
    },
    'AMAZON.LoopOffIntent': function() {
        app.db().load('audio', function(error, data) {
            data.loop = false;
            app.db().save('audio', data, function(err) {
                app.tell('Loop deaktiviert.');
            });
        });
    },
    'AMAZON.RepeatIntent': function() {
        app.db().load('audio', function(error, data) {
            data.repeat = true;
            app.db().save('audio', data, function(err) {
                app.tell('Das aktuelle Lied wird wiederholt.');
            });
        });
    },
    'AMAZON.StartOverIntent': function() {
        let audioPlayer = app.alexaSkill().audioPlayer();
        let track = findTrackByToken(audioPlayer.getToken());

        audioPlayer
            .setOffsetInMilliseconds(0)
            .play(
                track.url,
                track.token,
                'REPLACE_ALL')
            .endSession();
    },
    'AUDIOPLAYER': {
        'AudioPlayer.PlaybackStarted': function() {
            console.log('AudioPlayer.PlaybackStarted');
        },
        'AudioPlayer.PlaybackNearlyFinished': function() {
            console.log('AudioPlayer.PlaybackNearlyFinished');

            app.db().load('audio', function(error, data) {
                let track = nextTrack(audioPlayer.getToken(), data.shuffle, data.loop);

                if (data.repeat) {
                    track = findTrackByToken(audioPlayer.getToken());
                    data.repeat = false;
                    app.db().save('audio', data, function(err, data) {
                       // do nothing
                    });
                }
                // no next track
                if (!track) {
                    // clear queue, stop after track is finished
                    audioPlayer.clearQueue('CLEAR_ENQUEUED').endSession();
                } else {
                    console.log('Next song: ' + track.title);
                    audioPlayer
                        .setExpectedPreviousToken(audioPlayer.getToken());
                    audioPlayer
                        .play(
                            track.url,
                            track.token,
                            'ENQUEUE')
                        .endSession();
                }
            });
        },
        'AudioPlayer.PlaybackStopped': function() {
            console.log('AudioPlayer.PlaybackStopped');
        },
    },
};


function nextTrack(currentTrackToken, shuffle, loop) {
    if (shuffle) {
        return _.sample(tracks);
    }

    for (let i = 0; i < tracks.length; i++) {
        let track = tracks[i];
        if (track.token === currentTrackToken) {
            if (i+1 < tracks.length) {
                return tracks[i+1];
            }
            if (i+1 === tracks.length && loop) {
                return tracks[0];
            }
        }
    }
    return null;
}

function previousTrack(currentTrackToken) {
    for (let i = 0; i < tracks.length; i++) {
        let track = tracks[i];
        if (track.token === currentTrackToken) {
            if (i-1 >= 0) {
                return tracks[i-1];
            }
        }
    }
    return null;
}

/**
 * Returns track object from tracks array by token
 * @param {string} token
 * @return {*}
 */
function findTrackByToken(token) {
    let tracksWithToken = tracks.filter((t) => {
        if (t.token === token) {
            return true;
        }
    });
    if (tracksWithToken.length > 0) {
        return tracksWithToken[0];
    }
    return null;
}

